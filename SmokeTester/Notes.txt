TODO
Cloud Storage
The Filename will be prefixed with the Team name

look for application profile in a file located in FileSystem.Current.AppDataDirectory
if not exist display setup configuration which requires
	Team Name
	Storage Account Name
	Storage Account Key or connection string
	Container Name
Filename is "appConfig.json"	

Save encrypted connection string to FileSystem.Current.AppDataDirectory

encrypt possibly using AppInfo.Current.PackageName string as key




Make sure to set the environment variables 
AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET to the respective values 
obtained during the App Registration process.


Ideas about including B2C this is just rough test to see if it can work
private async Task<string> GetTokenAsync(SmokeParams smokeParams)
    {
        string scope = ".default" ;

        string authority;
        string fullscope;
        IPublicClientApplication app;
        
        if (smokeParams.IsB2C) 
        {
            scope = """("openid"; "profile"; "offline_access"; "https://MGIAIDTESTB2C.onmicrosoft.com/api/Access")""";
            authority = $"https://mgiaidtestb2c.b2clogin.com/tfp/{smokeParams.TenantId}";
            try
            {
                app = PublicClientApplicationBuilder.Create(smokeParams.ClientId)
               .WithB2CAuthority($"{authority}/B2C_1A_SignIn_SPA").WithDefaultRedirectUri()
               .Build();
            }
            catch (Exception ex)
            {
                var xx = ex.Message;
                throw;
            }
            
            fullscope = $"{smokeParams.ClientId}/{scope}";
        }
        else
        {
            authority = $"https://login.microsoftonline.com/{smokeParams.TenantId}";
            app = PublicClientApplicationBuilder.Create(smokeParams.ClientId)
            .WithAuthority(new Uri(authority)).WithDefaultRedirectUri()
            .Build();
            fullscope = $"{smokeParams.ClientId}/{scope}";
        }



        
        
        var result = await app.AcquireTokenInteractive(new[] { fullscope }).ExecuteAsync();
        
        return result.AccessToken;
    }

    
