@page "/smoke"
@using SmokeTester.Data;
@using SmokeTester.Services;

<h1>Smoke Test</h1>



<EditForm Model="SmokeModel" OnValidSubmit="@HandleValidSubmit">
    
    <div class="form-group form-row mb-3">
        <div class="form-group form-row mb-3">
            <label>Profile: </label>
            <RhzDropdown DataSource="@EndPoints" GetValue=@(x=> (x.Key,x.ClientId)) 
                         OnElementClick="@( (string selection)=> OnSelection(selection))">
            </RhzDropdown>
        </div>
        <div class="row">
            <div class="col-6">
                <InputText class="form-control col-sm-8" id="clientId" name="ClientId" @bind-Value=SmokeModel.ClientId placeholder="ClientId" />
                <ValidationMessage For="@(() => SmokeModel.ClientId)" />
            </div>
            <div class="col-6">
                <InputText class="form-control col-sm-8" id="tenentId" name="TenantId" @bind-Value=SmokeModel.TenantId placeholder="TenantId" data-val="true" data-val-required="*" />
                <ValidationMessage For="@(() => SmokeModel.TenantId)" />
            </div>
        </div>
    </div>
    
    <div class="form-group form-row mb-3">
        <InputText class="form-control col-sm-8" id="url" name="Url" @bind-Value=SmokeModel.Url placeholder="Url" data-val="true" data-val-required="*" />
        <ValidationMessage For="@(() => SmokeModel.Url)" />
    </div>

    <div class="mb-3">
        <label for="tknr">Token required</label>
        <InputCheckbox id="tknr" name="TokenRequired" @bind-Value=SmokeModel.TokenRequired @oninput="OnOtherClick" />
        <label for="verb">Use Post</label>
        <InputCheckbox id="verb" name="UsePost" @bind-Value=SmokeModel.UsePost @oninput="OnOtherClick" />
        <label for="hcheck">Health Check</label>
        <InputCheckbox id="hcheck" name="HealthCheck" @bind-Value=SmokeModel.IsHealthCheck @oninput="OnHealthCheckClick" />
    </div>

    <div class="form-group form-row mb-3">
        <InputTextArea rows="20" class="form-control col-sm-8" id="tkn" name="Token" @bind-Value=SmokeModel.Token placeholder="Result" enabled="false" />
    </div>


    <button type="submit" disabled="@ButtonIsDisabled" class="btn btn-primary">Test</button>
</EditForm>


@code {
    @inject ISmokeTestTools SmokeTestTools;
    protected IEnumerable<EndPointProfile> EndPoints { get; set; } = new List<EndPointProfile>();
    protected EndPointProfile SelectedEndPointProfile { get; set; } 
    protected SmokeParams SmokeModel { get; set; } = new SmokeParams();
    protected bool ButtonIsDisabled { get; set; }

    [Parameter]  
        public string Key {  
            get;  
            set;  
        }  
    protected EndPointProfile Endpoint
    {
            get;  
            set;  
        }  

    protected override async Task OnInitializedAsync()
    {
        EndPoints = await SmokeTestTools.GetProfiles();
    }

    private  void OnSelection(string selection)
    {
        //await Task.Delay(50);
        SelectedEndPointProfile = EndPoints.Where<EndPointProfile>(x => x.ClientId == selection).FirstOrDefault();
        SmokeModel.ClientId = SelectedEndPointProfile.ClientId;
        SmokeModel.TenantId = SelectedEndPointProfile.TenantId;
        if (SmokeModel.IsHealthCheck)
        {
            SmokeModel.Url = $"{SelectedEndPointProfile.BaseUrl}/health";
        }
        else
        {
            SmokeModel.Url = SelectedEndPointProfile.ActiveUrl;
        }
        
        //return;
    }

    protected void OnHealthCheckClick(ChangeEventArgs e)
    {
        if ((bool)(e.Value))
        {
            SmokeModel.TokenRequired = false;
            SmokeModel.UsePost = false;
            if (SelectedEndPointProfile is not null)
            {
                SmokeModel.Url = $"{SelectedEndPointProfile.BaseUrl}/health"; 
            }
        } else
        {
            SmokeModel.TokenRequired = true;
            SmokeModel.UsePost = true;
            if (SelectedEndPointProfile is not null)
            {
                SmokeModel.Url = SelectedEndPointProfile.ActiveUrl;
            }
        }
    }

    protected void OnOtherClick(ChangeEventArgs e)
    {
        if ((bool)(e.Value))
        {
            SmokeModel.IsHealthCheck = false;
        }
    }



    
    protected async Task HandleValidSubmit()
    {
        SmokeModel.Token = await SmokeTestTools.ProcessRequest(SmokeModel);
        //We make the call to smoke tools here when all required fields a filled out
        //await Task.Delay(10);
        return;
    }
}
