@page "/smoke"
@using SmokeTester.Data;
@using SmokeTester.Services;

<h1>Smoke Test</h1>



<EditForm Model="SmokeModel" OnValidSubmit="@HandleValidSubmit">
    
    <div class="form-group form-row mb-3">
        <div class="form-group form-row mb-3 col-3">
            <SmkFormSelect DataSource="@EndPoints" GetValue=@(x=> (x.Key,x.ClientId)) 
                         OnElementClick="@( (string selection)=> OnSelection(selection))">
            </SmkFormSelect>
        </div>
        <div class="form-group input-group mb-3">
            <div class="form-floating col-5">
                <input type="text" class="form-control" id="clientId" name="ClientId" @bind=SmokeModel.ClientId placeholder="ClientId">
                <label for="clientId">ClientId</label>
            </div>
            <div class="col-2"></div>
            <div class="form-floating col-5">
                <input type="text" class="form-control" id="tenentId" name="TenantId" @bind=SmokeModel.TenantId placeholder="TenantId">
                <label for="tenentId">TenantId</label>
            </div>
        </div>
    </div>
    
    <div class="form-group form-row mb-3">
        <InputText class="form-control col-sm-8" id="url" name="Url" @bind-Value=SmokeModel.Url placeholder="Url" data-val="true" data-val-required="*" />
        <ValidationMessage For="@(() => SmokeModel.Url)" />
    </div>

    <div class="form-group form-row mb-3">
        <div class="row">
            <div class="col-6">
                <label class="form-check-label" for="tknr">Token required</label>
                <input class="form-check-input" type="checkbox" id="tknr" name="TokenRequired" @bind=SmokeModel.TokenRequired @oninput="OnOtherClick" />
                <label class="form-check-label" for="verb">Use Post</label>
                <input class="form-check-input" type="checkbox" id="verb" name="UsePost" @bind=SmokeModel.UsePost @oninput="OnOtherClick" />
                <label class="form-check-label" for="hcheck">Health Check</label>
                <input class="form-check-input" type="checkbox" id="hcheck" name="HealthCheck" @bind=SmokeModel.IsHealthCheck @oninput="OnHealthCheckClick" />
            </div>
            <div class="col-6">
                <button type="submit" disabled="@ButtonIsDisabled" class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Button tip on top">Test</button>
            </div>
        </div>
    </div>

    
    <div class="form-group form-row mb-3">
        <InputTextArea rows="20" class="form-control col-sm-8" id="tkn" name="Token" @bind-Value=SmokeModel.Token placeholder="Result" enabled="false" />
    </div>
    
   
</EditForm>


@code {
    @inject ISmokeTestTools SmokeTestTools;
    @inject ISmokeStorageTools SmokeStorageTools;
    protected IEnumerable<EndPointProfile> EndPoints { get; set; } = new List<EndPointProfile>();
    protected EndPointProfile SelectedEndPointProfile { get; set; } 
    protected SmokeParams SmokeModel { get; set; } = new SmokeParams();
    protected bool ButtonIsDisabled { get; set; }

    [Parameter]  
        public string Key {  
            get;  
            set;  
        }  
    protected EndPointProfile Endpoint
    {
            get;  
            set;  
        }  

    protected override async Task OnInitializedAsync()
    {
        //EndPoints = await SmokeTestTools.GetProfiles();
        EndPoints = await SmokeStorageTools.LoadFromFileAsync<IEnumerable<EndPointProfile>>("TestProfiles.json");
    }

    private  void OnSelection(string selection)
    {
        SelectedEndPointProfile = EndPoints.Where<EndPointProfile>(x => x.ClientId == selection).FirstOrDefault();
        SmokeModel.ClientId = SelectedEndPointProfile.ClientId;
        SmokeModel.TenantId = SelectedEndPointProfile.TenantId;
        if (SmokeModel.IsHealthCheck)
        {
            SmokeModel.Url = $"{SelectedEndPointProfile.BaseUrl}/health";
        }
        else
        {

            
            SmokeModel.Url = SelectedEndPointProfile.ActiveUrl;
        }
    }

    protected void OnHealthCheckClick(ChangeEventArgs e)
    {
        if ((bool)(e.Value))
        {
            SmokeModel.TokenRequired = false;
            SmokeModel.UsePost = false;
            if (SelectedEndPointProfile is not null)
            {
                SmokeModel.Url = $"{SelectedEndPointProfile.BaseUrl}/health"; 
            }
        } else
        {
            SmokeModel.TokenRequired = true;
            SmokeModel.UsePost = true;
            if (SelectedEndPointProfile is not null)
            {
                SmokeModel.Url = SelectedEndPointProfile.ActiveUrl;
            }
        }
    }

    protected void OnOtherClick(ChangeEventArgs e)
    {
        if ((bool)(e.Value))
        {
            SmokeModel.IsHealthCheck = false;
        }
    }

    
    protected async Task HandleValidSubmit()
    {
        ButtonIsDisabled = true;
        //await SmokeStorageTools.Save(EndPoints, "TestProfiles.json");
        //SmokeModel.Token = await SmokeTestTools.ProcessRequest(SmokeModel);  //tempory disabled for testing
        await Task.Delay(6000);
        //var data = await SmokeStorageTools.Load<IEnumerable<EndPointProfile>>("TestProfiles.json");
        ButtonIsDisabled = false; 
        return;
    }
    
}
